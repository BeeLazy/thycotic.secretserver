{
    "New function": {
        "prefix": "tssnew",
        "body": [
            "function New-${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:short synopsis}",
            "",
            "    .DESCRIPTION",
            "    ${3:longer description}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/New-Tss${1}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding(SupportsShouldProcess)]",
            "    [OutputType('${4:ClassName}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [TssSession]",
            "        \\$TssSession,",
            "",
            "        # ${5:Param description}",
            "        [Parameter(Mandatory,ValueFromPipeline)]",
            "        [${6:type}]",
            "        \\$${7:Param1},",
            "",
            "        # ${7: Param description",
            "        [Parameter(ValueFromPipeline)]",
            "        [${8:type}]",
            "        \\$${9:Param2},",
            "",
            "    )",
            "    begin {",
            "        \\$tssNewParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeTssParams \\$TssSession",
            "    }",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$tssNewParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            . \\$CheckVersion \\$TssSession '10.9.000000' \\$PSCmdlet.MyInvocation",
            "            \\$restResponse = $null",
            "            \\$uri = \\$TssSession.ApiUrl, '${10:endpoint}' -join '/'",
            "            \\$invokeParams.Uri = \\$uri",
            "            \\$invokeParams.Method = 'POST'",
            "",
            "            \\$newBody = [ordered]@{}",
            "            switch (\\$tssNewParams.Keys) {",
            "                '${7}' { \\$newBody.Add('id',\\$${7}) }",
            "                '${9}' {",
            "                    if (\\$_ -eq 'something') {",
            "                        \\$newBody.Add('useDatabasePaging', \\$false)",
            "                    } else {",
            "                        \\$newBody.Add('useDatabasePaging', \\$true)",
            "                    }",
            "                }",
            "            }",
            "",
            "            \\$invokeParams.Body = (\\$newBody | ConvertTo-Json)",
            "",
            "            Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$uri with:`n \\$newBody\"",
            "            if (-not \\$PSCmdlet.ShouldProcess(\"\", \"\\$(\\$invokeParams.Method) \\$uri with \\$($invokeParams.Body)\")) { return }",
            "            try {",
            "                \\$restResponse = Invoke-TssRestApi @invokeParams",
            "            } catch {",
            "                Write-Warning \"Issue creating report [${1}]\"",
            "                \\$err = \\$_",
            "                . \\$ErrorHandling \\$err",
            "            }",
            "",
            "            if (\\$restResponse) {",
            "                . \\$${4}Object \\$restResponse",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "Create New function"
    },
    "Search function": {
        "scope": "powershell",
        "prefix": "tsssearch",
        "body": [
            "function Search-${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${3:Longer of what command does}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/Search-Tss${1}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Search-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding()]",
            "    [OutputType('Tss${7}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [TssSession]",
            "        \\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Alias(\"${1}Id\")]",
            "        [int]",
            "        \\$${4},",
            "",
            "        # Sort by specific property, default ${1}Name",
            "        [string]",
            "        \\$SortBy = '${1}Name'",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeTssParams \\$TssSession",
            "    }",
            "",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            . \\$CheckVersion \\$TssSession '10.9.000000' \\$PSCmdlet.MyInvocation",
            "            \\$restResponse = \\$null",
            "            \\$uri = \\$TssSession.ApiUrl, '${1}s' -join '/'",
            "            \\$uri = \\$uri, \"sortBy[0].direction=asc&sortBy[0].name=\\$SortBy&take=\\$(\\$TssSession.Take)\" -join '?'",
            "",
            "            \\$filters = @()",
            "            if (\\$tssParams.ContainsKey('${4}')) {",
            "                \\$filters += \"filter.${4}=\\$${4}\"",
            "            }",
            "            if (\\$filters) {",
            "                \\$uriFilter = \\$filters -join '&'",
            "                Write-Verbose \"Filters: \\$uriFilter\"",
            "                \\$uri = \\$uri, \\$uriFilter -join '&'",
            "            }",
            "",
            "            \\$invokeParams.Uri = \\$uri",
            "            \\$invokeParams.Method = 'GET'",
            "",
            "            Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$uri with: \\$body\"",
            "            try {",
            "                \\$restResponse = Invoke-TssRestApi @invokeParams",
            "            } catch {",
            "                Write-Warning \"Issue on search request\"",
            "                \\$err = \\$_",
            "                . \\$ErrorHandling \\$err",
            "            }",
            "",
            "            if (\\$restResponse.records.Count -le 0 -and \\$restResponse.records.Length -eq 0) {",
            "                Write-Warning \"No ${1} found\"",
            "            }",
            "            if (\\$restResponse.records) {",
            "                . \\$Tss${7}Object \\$restResponse.records",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Search function"
    },
    "Get function": {
        "scope": "powershell",
        "prefix": "tssget",
        "body": [
            "function Get-${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${3:Longer of what command does}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Get-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/Get-Tss${1}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding()]",
            "    [OutputType('Tss${1}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [TssSession]",
            "        \\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${1}Id\")]",
            "        [int[]]",
            "        \\$${4}",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeTssParams \\$TssSession",
            "    }",
            "",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            . \\$CheckVersion \\$TssSession '10.9.000000' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${7} in \\$${4}) {",
            "                \\$restResponse = \\$null",
            "                \\$uri = \\$TssSession.ApiUrl, '${1}', \\$${8} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'GET'",
            "",
            "                Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$uri with \\$body\"",
            "                try {",
            "                    \\$restResponse = Invoke-TssRestApi @invokeParams",
            "                } catch {",
            "                    Write-Warning \"Issue getting ___ on [\\$${7}]\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse) {",
            "                    # Do any formatting or call object part",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Get function"
    },
    "Remove function": {
        "scope": "powershell",
        "prefix": "tssremove",
        "body": [
            "function Remove-${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${3:Longer of what command does}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Remove-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/Remove-Tss${1}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding(SupportsShouldProcess)]",
            "    [OutputType('TssDelete')]",
            "    param (",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [TssSession]",
            "        \\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${1}Id\")]",
            "        [int[]]",
            "        \\$${4}",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeTssParams \\$TssSession",
            "    }",
            "",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            . \\$CheckVersion \\$TssSession '10.9.000000' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${7} in \\$${4}) {",
            "                \\$restResponse = \\$null",
            "                \\$uri = \\$TssSession.ApiUrl, '${9}', \\$${7} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'DELETE'",
            "",
            "                if (-not \\$PSCmdlet.ShouldProcess(\\$${7},\"\\$(\\$invokeParams.Method) \\$uri\")) { return }",
            "                Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$uri with \\$body\"",
            "                try {",
            "                    \\$restResponse = Invoke-TssRestApi @invokeParams",
            "                } catch {",
            "                    Write-Warning \"Issue removing [\\$${7}]\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse) {",
            "                    [TssDelete]@{",
            "                        Id = \\$restResponse.id",
            "                        ObjectType = \\$restResponse.objectType",
            "                    }",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Remove function"
    },
    "Set function": {
        "prefix": "tssset",
        "body": [
            "function Set-${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    Set ${2}",
            "",
            "    .DESCRIPTION",
            "    Set ${2}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Set-Tss${1} -TssSession \\$session -${2} ${3:some test value}",
            "",
            "    ${4:Add minimum example for each parameter}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/Set-Tss${1}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [cmdletbinding(SupportsShouldProcess, DefaultParameterSetName = 'all')]",
            "    param(",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [TssSession]",
            "        \\$TssSession,",
            "",
            "        # Folder Id to modify",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${5}Id\")]",
            "        [int[]]",
            "        \\$${2},",
            "",
            "    )",
            "    begin {",
            "        \\$setParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeTssParams \\$TssSession",
            "    }",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$setParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            . \\$CheckVersion \\$TssSession '10.9.0000${6}' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${7} in \\$${2}) {",
            "                \\$restResponse = \\$null",
            "                \\$uri = \\$TssSession.ApiUrl, '${8}', \\$${7} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'PATCH'",
            "",
            "                \\$setBody = @{ data = @{ } }",
            "",
            "                \\$whatIfProcessing = 0",
            "                switch (\\$setParams.Keys) {",
            "                    '${9}' {",
            "                        if (-not \\$PSCmdlet.ShouldProcess(\"${10] ID: \\$${11}\", \"Updating {12} to \\$(\\$${9})\")) {",
            "                            \\$whatIfProcessing++",
            "                        }",
            "                        if ($setParams.ContainsKey('') -and \\$) {",
            "                            Write-Warning \"Unable to update ${9} when enabling ${10}\"",
            "                            return",
            "                        }",
            "                        \\$setBody.data.${9} = \\$${9}",
            "                    }",
            "                }",
            "",
            "                \\$invokeParams.Body = \\$setBody | ConvertTo-Json",
            "",
            "                if (\\$PSCmdlet.ShouldProcess(\"${10} ID: \\${12}\", \"\\$(\\$invokeParams.Method) \\$uri with:`n\\$(\\$invokeParams.Body)`n\")) {",
            "                    Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$uri with:`n\\$(\\$invokeParams.Body)`n\"",
            "                    try {",
            "                        \\$restResponse = Invoke-TssRestApi @invokeParams",
            "                    } catch {",
            "                        Write-Warning \"Issue setting property on ${10} [\\$${7}]\"",
            "                        \\$err = \\$_",
            "                        . \\$ErrorHandling \\$err",
            "                    }",
            "                }",
            "                if (\\$restResponse) {",
            "                    # Do comparison to verify set occurred - verbose output only",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "Create a Set command"
    },
    "New tests": {
        "prefix": "tsstest",
        "body": [
            "BeforeDiscovery {",
            "    \\$commandName = Split-Path (\\$PSCommandPath.Replace('.Tests.ps1','')) -Leaf",
            "    . ([IO.Path]::Combine([string]\\$PSScriptRoot, '..', 'constants.ps1'))",
            "}",
            "Describe \"\\$commandName verify parameters\" {",
            "    BeforeDiscovery {",
            "        [object[]]\\$knownParameters = 'TssSession',",
            "        [object[]]\\$currentParams = ([Management.Automation.CommandMetaData]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')).Parameters.Keys",
            "        [object[]]\\$commandDetails = [System.Management.Automation.CommandInfo]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')",
            "        \\$unknownParameters = Compare-Object -ReferenceObject \\$knownParameters -DifferenceObject \\$currentParams -PassThru",
            "    }",
            "    Context \"Verify parameters\" -Foreach @{currentParams = \\$currentParams } {",
            "        It \"\\$commandName should contain <_> parameter\" -TestCases \\$knownParameters {",
            "            \\$_ -in \\$currentParams | Should -Be \\$true",
            "        }",
            "        It \"\\$commandName should not contain parameter: <_>\" -TestCases \\$unknownParameters {",
            "            \\$_ | Should -BeNullOrEmpty",
            "        }",
            "    }",
            "    Context \"Command specific details\" {",
            "        It \"\\$commandName should set OutputType to ${1:Class name}\" -TestCases \\$commandDetails {",
            "            \\$_.OutputType.Name | Should -Be '${1}'",
            "        }",
            "    }",
            "}",
            "Describe \"\\$commandName functions\" {",
            "    Context \"Checking\" {",
            "        BeforeAll {",
            "            \\$session = [pscustomobject]@{",
            "                ApiVersion   = 'api/v1'",
            "                Take         = 2147483647",
            "                SecretServer = 'http://alpha/'",
            "                ApiUrl       = 'http://alpha/api/v1'",
            "                AccessToken  = 'AgJf5YLFWtzw2UcBrM1s1KB2BGZ5Ufc4qLZ'",
            "                RefreshToken = '9oacYFZZ0YqgBNg0L7VNIF6-Z9ITE51Qplj'",
            "                TokenType    = 'bearer'",
            "                ExpiresIn    = 1199",
            "            }",
            "            Mock -Verifiable -CommandName Get-TssVersion -MockWith {",
            "                return @{",
            "                    Version = '10.9.000033'",
            "                }",
            "            }",
            "",
            "            Mock -Verifiable -CommandName Invoke-TssRestApi -ParameterFilter { \\$Uri -eq \"\\$(\\$session.ApiUrl)/${2:endpoint}\" } -MockWith {",
            "                return [pscustomobject]@{",
            "                    # Object expected by REST API call",
            "                }",
            "            }",
            "            \\$object = ${2:Public Function name} -TssSession \\$session ${3:Parameters}",
            "            Assert-VerifiableMock",
            "        }",
            "        It \"Should not be empty\" {",
            "            \\$object | Should -Not -BeNullOrEmpty",
            "        }",
            "        It \"Should have property <_>\" -TestCases ${4:Property list (minimum 3)} {",
            "            \\$object[0].PSObject.Properties.Name | Should -Contain \\$_",
            "        }",
            "        It \"Should have property ${5:Single property to check} equal ${6:value}\" {",
            "            $object.${5} | Should -Be ${6}",
            "        }",
            "    }",
            "}"
        ],
        "description": "New tests"
    },
    "Functional tests": {
        "prefix": "tsstestfunctional",
        "body": [
            "Describe \"\\$commandName functions\" {",
            "    Context \"Checking\" {",
            "        BeforeAll {",
            "            \\$session = [pscustomobject]@{",
            "                ApiVersion   = 'api/v1'",
            "                Take         = 2147483647",
            "                SecretServer = 'http://alpha/'",
            "                ApiUrl       = 'http://alpha/api/v1'",
            "                AccessToken  = 'AgJf5YLFWtzw2UcBrM1s1KB2BGZ5Ufc4qLZ'",
            "                RefreshToken = '9oacYFZZ0YqgBNg0L7VNIF6-Z9ITE51Qplj'",
            "                TokenType    = 'bearer'",
            "                ExpiresIn    = 1199",
            "            }",
            "            Mock -Verifiable -CommandName Get-TssVersion -MockWith {",
            "                return @{",
            "                    Version = '10.9.000033'",
            "                }",
            "            }",
            "",
            "            Mock -Verifiable -CommandName Invoke-TssRestApi -ParameterFilter { \\$Uri -eq \"\\$(\\$session.ApiUrl)/${1:endpoint}\" } -MockWith {",
            "                return [pscustomobject]@{",
            "                    # Object expected by REST API call",
            "                }",
            "            }",
            "            \\$object = ${3:Public Function name} -TssSession \\$session ${4:Parameters}",
            "            Assert-VerifiableMock",
            "        }",
            "        It \"Should not be empty\" {",
            "            \\$object | Should -Not -BeNullOrEmpty",
            "        }",
            "        It \"Should have property <_>\" -TestCases ${5:Property list (minimum 3)} {",
            "            \\$object[0].PSObject.Properties.Name | Should -Contain \\$_",
            "        }",
            "        It \"Should have property ${6:Single property to check} equal ${7:value}\" {",
            "            $object.${6} | Should -Be ${6}",
            "        }",
            "    }",
            "}"
        ],
        "description": "New tests"
    },
    "Base Part": {
        "scope": "powershell",
        "prefix": "tsspart",
        "body": [
            "<#",
            "    .Synopsis",
            "        Creates a ${1:Class name} object to output the ${2:Model Name} object",
            "#>",
            "param(",
            "    [pscustomobject]\\$Object",
            ")",
            "",
            "begin {",
            "    \\$Properties = \\$Object[0].PSObject.Properties.Name",
            "    if (\\$Object.${3}) {",
            "        \\$childProperties = \\$Object.${3:Child property}[0].PSObject.Properties.Name",
            "    } else {",
            "        Write-Verbose \"No ${3} found on records object\"",
            "    }",
            "}",
            "process {",
            "    if (\\$childProperties) {",
            "        \\$${3} = @()",
            "            foreach (\\$${4} in \\$Object.${3}) {",
            "                \\$child = [${5:Child class name}]::new()",
            "                foreach (\\$cProp in \\$childProperties) {",
            "                    if (\\$cProp -in \\$child.PSObject.Properties.Name) {",
            "                        \\$child.\\$cProp = \\$${4}.\\$cProp",
            "                    } else {",
            "                        Write-Warning \"Property \\$cProp does not exist in the ${3} class. Please create a bug report at https://github.com/thycotic-ps/thycotic.secretserver/issues/new/choose\"",
            "                    }",
            "                    \\$${3} += \\$child",
            "                }",
            "            }",
            "    }",
            "",
            "        \\$outObject = @()",
            "        foreach (\\$p in \\$Object) {",
            "            \\$currentObject = [${1}]::new()",
            "                foreach (\\$pProp in \\$Properties) {",
            "                    if (\\$pProp -eq '${3}') {",
            "                        \\$currentObject.${3} = \\$${3}",
            "                    }",
            "                    if (\\$pProp -in \\$currentObject.PSObject.Properties.Name) {",
            "                        \\$currentObject.\\$pProp = \\$p.\\$pProp",
            "                    } else {",
            "                        Write-Warning \"Property \\$pProp does not exist in the ${1} class. Please create a bug report at https://github.com/thycotic-ps/thycotic.secretserver/issues/new/choose\"",
            "                    }",
            "                }",
            "                \\$outObject += \\$currentObject",
            "        }",
            "        return \\$outObject",
            "}"
        ],
        "description": "template for parts with Thycotic.SecretServer"
    },
    "About Help": {
        "prefix": "tssabout",
        "body": [
            "TOPIC",
            "    This help topic describes the ${1:Class name} class in the Thycotic.SecretServer module",
            "",
            "CLASS",
            "    ${1}",
            "",
            "INHERITANCE",
            "    None",
            "",
            "DESCRIPTION",
            "    The ${1} class represents the ${2: Model object name from API doc} object returned by Secret Server endpoint ${3:endpoint}",
            "",
            "CONSTRUCTORS",
            "    new()",
            "",
            "PROPERTIES",
            "    Documented in the REST API doc for Secret Server, see ${2} definition",
            "",
            "METHODS",
            "",
            "RELATED LINKS:",
            "    ${4:Function name utilizing it, list multiple if it applies}"
        ],
        "description": "template for the about_classname_help.txt files"
    }
}